#%RAML 1.0
title: Semaphore
version: v2
baseUri: https://api.semaphoreci.com
mediaType: application/json

documentation:
- title: Welcome
  content: |
    Partial description for Semaphore API, containing only resources necesary
    for shared configuration feature.

- title: Constraints
  content: |
    These constraints apply to *all* resources.

    *Note*: Autentication is validated before anything else in the request.

    Preconditions:
    - Requester is authenticated.
    - Request is authorized.

    Failures:
    - Requester is *not* authenticated.
      - Response code: 401
      - Rationale: Requester should be notified that he/she/it needs to log-in.
          There is no security risk in it.
    - Request is *not* authorized.
      - Response code: 404
      - Rationale: Requester should *not* be notified with response 403 that
          object exists but requester is not authorized.
          To malicious requester it reveals which objects exist.

types:
  Error:
    type: object
    properties:
      message: string
  User:
    type: object
    properties:
      username: string
      email: string
      realname: string
  Org:
    type: object
    properties:
      id: integer
      name: string
      username: string
      description: string
  TeamPatch:
    type: object
    properties:
      name?: string
      permission?:
        enum: [read, write, admin]
      description?: string
  TeamPost:
    type: object
    properties:
      name: string
      permission:
        enum: [read, write, admin]
      description?: string
  Team:
    type: object
    properties:
      name: string
      permission:
        enum: [read, write, admin]
      description: string?
      id: integer
      url: string
      updated_at:
        type: datetime
        format: rfc3339
      created_at:
        type: datetime
        format: rfc3339
  ProjectPost:
    type: object
    properties:
      name: string
      description?: string
  ProjectPatch:
    type: object
    properties:
      name?: string
      description?: string
  Project:
    type: ProjectPost
    properties:
      id: integer
  SharedConfigPatch:
    type: object
    properties:
      name?: string
      description?: string
  SharedConfigPost:
    type: object
    properties:
      name: string
      description?: string
  SharedConfig:
    type: SharedConfigPost
    properties:
      id: integer
  SharedEnvVarPatch:
    type: object
    properties:
      key?: string
      value?: string
  SharedEnvVarPost:
    type: object
    properties:
      name: string
      value: string
  SharedEnvVar:
    type: SharedEnvVarPost
    properties:
      id: integer
  SharedConfFilePatch:
    type: object
    properties:
      name?: string
      content?: string
  SharedConfFilePost:
    type: object
    properties:
      path: string
      content: string
  SharedConfFile:
    type: SharedConfFilePost
    properties:
      id: integer

traits:
  withRequestItem:
    body:
      application/json:
        type: <<item>>
  withResponseItem:
    responses:
      200:
        body:
          application/json:
            type: <<item>>
  withResponseItems:
    responses:
      200:
        body:
          application/json:
            type: <<item>>[]
  withCreateResponse:
    responses:
      201:
        body:
          application/json:
            type: <<item>>
  withNoBodyResponse:
    responses:
      204:
  withClientError:
    responses:
      400:
        body:
          application/json:
            type: Error
  withNotFoundError:
    responses:
      404:
        body:
          application/json:
            type: Error
  withPreconditionFailedError:
    responses:
      412:
        body:
          application/json:
            type: Error

/users:
  description: |
    Manage Semaphore users
  get:
    description: List all users\n\n
    is: [ withResponseItems: {item : User}, withClientError ]

  /{username}:
    get:
      description: |
        Show {username} user details

        Precondition:
          - user with {username} exists
    delete:
      description: "Delete {username} user\n\n
        Precondition:\n  - user with {username} exists"

/orgs:
  description: Manage Semaphore organizations
  get:
    description: Get list of all organizations available to the user
    is: [withResponseItems: {item : Org}]
  /{org_username}:
    get:
      description: "Get organization details\n\n
      Precondition:\n - organization with {org_username} exists\n\n\n"
      is: [withResponseItem: {item : Org}, withNotFoundError]
    /teams:
      get:
        description: "List teams that belong to {org_username} organisation\n\n
        Precondition:\n - organization with {org_username} exists\n\n\n"
        is: [withResponseItems: {item : Team}]
      post:
        description: "Create team within the {org_username} organization.\n\n
        Precondition:\n - team with {name} in request body does not exist\n\n\n
        Postcondition:\n - team with {name} in request body {org_username} exists
        "
        is: [withRequestItem: {item : TeamPost},
             withResponseItem: {item : Team},
             withNotFoundError,
             withPreconditionFailedError]
    /projects:
      get:
        description: List projects that belong to {org_username} organisation
        is: [withResponseItems: {item : Project}]
      post:
        description: |
          Create project within the {org_username} organization

          Precondition:
            - Requester is member of {admin} or {owner} team.

          Postcondition:
            - new project with {name} and new id exists.

          *Note*: Projects with the same name can exist within an organization.
                Projects are uniquely identified by id.
        is: [withRequestItem: {item : ProjectPost},
             withResponseItem: {item : Project},
             withNotFoundError,
             withPreconditionFailedError]
    /shared-configurations:
      get:
        description: |
          List shared configurations that belong to {org_username} organisation

          Preconditions:
          - one of:
            - Requester is member of team with at least `write` permission or
            - Requester is owner

          Postconditions
        is: [withResponseItems: {item : SharedConfig}]
      post:
        description: |
          Create shared configuration within the {org_username} organization

          Preconditions:
          - {name} shared config does not exist in {org_username} organization
          - one of:
            - Requester is member of team with `admin` permission or
            - Requester is owner

          Postconditions:
          - {name} shared config exists in {org_username} organization
        is: [withRequestItem: {item : SharedConfigPost},
            withResponseItem: {item : SharedConfig},
            withNotFoundError,
            withPreconditionFailedError]

/teams/{team_id}:
  description: Manage Semaphore teams
  get:
    description: |
      Get {team_id} team details

      Precondition:
      - {team_id} team exists
      - one of:
        - Requester is member of team with at least `write` permission or
        - Requester is owner
    is: [withResponseItem: {item : Team}, withNotFoundError]
  delete:
    description: |
      Delete team

      Precondition:
      - {team_id} team exists
      - one of:
        - Requester is member of team with `admin` permission or
        - Requester is owner

      Postcondition:
      - {team_id} team does not exist
    is: [withNoBodyResponse, withNotFoundError]
  patch:
    description: |
      Update team.

      Precondition:
      - {team_id} team exists.
      - one of:
        - Requester is member of team with `admin` permission or
        - Requester is owner

      Postcondition:
      - {team_id} team exists but with altered attributes.
    is: [withRequestItem: {item : TeamPatch}, withResponseItem: {item : Team}, withNotFoundError]
  /users:
    description: Manage relations between {team_id} team and its members
    get:
      description: |
        List {team_id} team members

        Precondition:
        - {team_id} team exists
        - one of:
          - Requester is member of {team_id} team and the team has
            at least `write` permission or
          - Requester is owner
      is: [withResponseItems: {item : User}, withNotFoundError]
    /{username}:
      post:
        description: |
          Grant {username} user membership in {team_id} team.

          Preconditions:
          - {team_id} team exists.
          - {username} user exists
          - one of:
            - Requester is member of {team_id} team and the team has
              `admin` permission or
            - Requester is owner

          Postcondition:
          - {username} user is {team_id} team member
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: |
          Revoke {username} user membership in {team_id} team

          Precondition:
          - {username} user is {team_id} team member
          - one of:
            - Requester is member of {team_id} team and the team has
              `admin` permission or
            - Requester is owner

          Postcondition:
          - {username} user is *not* {team_id} team member
        is: [withNoBodyResponse, withNotFoundError]
  /projects:
    description: Manage {team_id} team projects
    get:
      description: |
        List all projects belonging to {team_id} team

        Preconditions:
        - {team_id} team exists.
        - one of:
          - Requester is member of {team_id} team and the team has
            at least `write` permission or
          - Requester is owner
      is: [withResponseItems: {item : Project}, withNotFoundError]
    /{project_id}:
      post:
        description: |
          Add a project to {team_id} team

          Preconditions:
          - {team_id} team exists
          - {project_id} project exists
          - {project_id} project is not {team_id} team member
          - one of:
            - Requester is member of {team_id} team and the team has
              `admin` permission or
            - Requester is owner

          Postconditions:
          - {project_id} project is {team_id} team member
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: |
          Remove a project from {team_id} team

          Preconditions:
          - {project_id} project is {team_id} team member
          - one of:
            - Requester is member of {team_id} team and the team has
              `admin` permission or
            - Requester is owner

          Postconditions:
          - {project_id} project is *not* {team_id} team member
        is: [withNoBodyResponse, withNotFoundError]
  /shared-configurations:
    get:
      description: |
        List all shared configurations added/belonging to {team_id} team

        Preconditions:
        - {team_id} team exists.
        - one of:
          - Requester is member of {team_id} team and the team has
            at least `write` permission or
          - Requester is owner
      is: [withResponseItems: {item : SharedConfig}, withNotFoundError]
    /{shared_config_id}:
      description: Manage relations between {team_id} team and
                    {shared_config_id} shared configuration
      post:
        description: |
          Add {shared_config_id} shared configuration to {team_id} team

          Preconditions:
          - {team_id} team exists
          - {shared_config_id} shared configuration exists
          - one of:
            - Requester is member of {team_id} team and the team has
              `admin` permission or
            - Requester is owner

          Postcondition:
          - {shared_config_id} shared configuration is {team_id} team member
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: |
          Remove {shared_config_id} shared configuration from {team_id} team

          Precondition:
          - {shared_config_id} shared configuration is {team_id} team member
          - one of:
            - Requester is member of {team_id} team and the team has
              `admin` permission or
            - Requester is owner

          Postcondition:
          - {shared_config_id} shared configuration is *not* {team_id} team member

          *Note*: It is allowed to remove shared configuration from the team
          even if there are projects to which that shared configuration is
          still attached to, in the team?
        is: [withNoBodyResponse, withNotFoundError]

/projects/{project_id}:
  description: Manage Semaphore projects
  get:
    description: |
      Show {project_id} project details

      Preconditions:
      - {project_id} project exists
      - one of:
        - Requester and {project_id} project are members of the team with
          at least `read` permission or
        - Requester is owner
    is: [withResponseItem: {item : Project}, withNotFoundError]
  delete:
    description: |
      Delete {project_id} project

      Precondition:
      - {project_id} project exists
      - one of:
        - Requester and {project_id} project are members of the team with
          `admin` permission or
        - Requester is owner

      Postcondition:
      - {project_id} project does *not* exist
    is: [withNoBodyResponse, withNotFoundError]
  patch:
    description: |
      Update {project_id} project

      Precondition:
      - {project_id} project exists
      - one of:
        - Requester and {project_id} project are members of the team with
          at least `write` permission or
        - Requester is owner

      Postcondition:
      - {project_id} project exists with updated attributes
    is: [withRequestItem: {item : ProjectPatch}, withResponseItem: {item : Project}, withNotFoundError]
  /shared-configurations:
    get:
      description: |
        List all shared configurations attached to {project_id} project

        Preconditions:
        - {project_id} project exists
        - one of:
          - Requester and {project_id} project are members of the team with
            at least `write` permission or
          - Requester is owner
      is: [withResponseItems: {item : SharedConfig}, withNotFoundError]
    /{shared_config_id}:
      post:
        description: |
          Attach {shared_config_id} shared configuration to {project_id} project

          Precondition:
          - {project_id} project exists
          - {shared_config_id} shared configuration exists
          - {shared_config_id} shared configuration is not attached to {project_id} project
          - one of:
            - Requester, {project_id} project and {shared_config_id} shared configuration
              all belong to the team with at least {write} permission or
            - Requester is owner

          Postconditions:
          - {shared_config_id} shared configuration is attached to {project_id} project
        is: [withResponseItem: {item : SharedConfig}, withNotFoundError]
      delete:
        description: |
          Dettach {shared_config_id} shared configuration from {project_id} project

          Precondition:
          - {shared_config_id} shared configuration is attached to {project_id} project
          - no resoureces from {shared_config_id} shared configuration is connected to
            {project_id} project
          - one of:
            - Requester, {project_id} project and {shared_config_id} shared configuration
              all belong to the team with at least {write} permission or
            - Requester is owner

          Postconditions:
          - {shared_config_id} shared configuration is *not*  attached to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
  /shared-environment-variables:
    get:
      description: |
        List all shared env variables connected to {project_id} project

        Preconditions:
        - {project_id} project exists
        - Requester and {project_id} project belong to team with at least
          {write} permisson
      is: [withResponseItems: {item : SharedEnvVar}, withNotFoundError]
    /{shared_env_var_id}:
      post:
        description: |
          Connect {shared_env_var_id} shared env var to {project_id} project

          Precondition:
          - {shared_env_var_id} shared env var belongs to shared configuration that is
            attached to {project_id} project
          - {shared_env_var_id} shared env var is not connected to {project_id} project
          - one of:
            - Requester and {project_id} project belong to the team
              with {write} permission or
            - Requester is owner

          Postconditions:
          - {shared_env_var_id} shared env var is connected to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: |
          Dissconnect {shared_env_var_id} shared env var from {project_id} project

          Preconditions:
          - {shared_env_var_id} shared env var is connected to {project_id} project
          - one of:
            - Requester and {project_id} project belong to the team
              with {write} permission or
            - Requester is owner

          Postconditions:
          - {shared_env_var_id} shared env var is *not* connected to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
  /shared-configuration-files:
    get:
      description: |
        List all shared conf files connected to {project_id} project

          Preconditions:
          - {project_id} project exists
          - Requester and {project_id} project belong to team with at least
            {write} permisson
      is: [withResponseItems: {item : SharedConfFile}, withNotFoundError]
    /{shared_conf_file_id}:
      post:
        description: |
          Connect {shared_conf_file_id} shared conf file to {project_id} project

          Preconditions:
          - {shared_conf_file_id} shared conf file belongs to shared configuration that is
            attached to {project_id} project
          - {shared_conf_file_id} shared conf file is not connected to {project_id} project
          - one of:
            - Requester and {project_id} project belong to the team
              with {write} permission or
            - Requester is owner

          Postconditions:
          - {shared_conf_file_id} shared conf file is connected to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: |
          Dissconnect {shared_conf_file_id} shared conf file from {project_id} project

          Preconditions:
          - {shared_conf_file_id} shared conf file is connected to {project_id} project
          - one of:
            - Requester and {project_id} project belong to the team
              with at least {write} permission or
            - Requester is owner

          Postconditions:
          - {shared_conf_file_id} shared conf file is *not* connected to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]

/shared-configurations:
  description: Manage Semaphore shared configurations
  /{shared_config_id}:
    get:
      description: |
        Show {shared_config_id} shared config details

        Preconditions:
        - {shared_config_id} shared configuration exists
        - one of:
          - Requester and {shared_config_id} shared configuration belong to the team
            with at least {write} permission or
          - Requester is owner
      is: [withResponseItem: {item : SharedConfig}, withNotFoundError]
    delete:
      description: |
        Delete {shared_config_id} shared config

        Preconditions:
        - {shared_config_id} shared configuration exists
        - {shared_config_id} shared configuration is *not* attached to any project
        - one of:
          - Requester and {shared_config_id} shared configuration belong to the team
            with {admin} permission or
          - Requester is owner

        Postconditions:
        - {shared_config_id} shared configuration does *not* exist
      is: [withNoBodyResponse, withNotFoundError]
    patch:
      description: |
        Update {shared_config_id} shared configuration attributes

        Preconditions:
        - {shared_config_id} shared configuration exists
        - one of:
          - Requester and {shared_config_id} shared configuration belong to the team
            with {admin} permission or
          - Requester is owner

        Postconditions:
        - {shared_config_id} shared configuration exists but with updated attributes
      is: [withRequestItem: {item : SharedConfigPatch},
          withResponseItem: {item : SharedConfig}, withNotFoundError]
    /shared-environment-variables:
      get:
        description: |
          List all shared env variables belonging to {shared_config_id} shared config

          Preconditions:
          - {shared_config_id} shared configuration exists
          - one of:
            - Requester and {shared_config_id} shared configuration belong to the team
              with at least {write} permission or
            - Requester is owner
        is: [withResponseItems: {item : SharedEnvVar}, withNotFoundError]
      post:
        description: |
          Create shared environment variable within {shared_config_id} shared config

          Preconditions:
          - {shared_config_id} shared configuration exists
          - shared environment variable with {name} defined in the body does not exist
          - one of:
            - Requester and {shared_config_id} shared configuration belong to the team
              with {admin} permission or
            - Requester is owner

          Postconditions:
          - shared environment variable with {name} defined in the body exists
        is: [withRequestItem: {item : SharedEnvVarPost},
            withResponseItem: {item : SharedEnvVar}, withNotFoundError]
    /shared-configuration-files:
      get:
        description: |
          List all shared config files belonging to {shared_config_id} shared config

          Preconditions:
          - {shared_config_id} shared configuration exists
          - one of:
            - Requester and {shared_config_id} shared configuration belong to the team
              with at least {write} permission or
            - Requester is owner
        is: [withResponseItems: {item : SharedConfFile}, withNotFoundError]
      post:
        description: |
          Create shared config file within {shared_config_id} shared configuration

          Preconditions:
          - {shared_config_id} shared configuration exists
          - shared config file with {path} defined in the body does not exist
          - one of:
            - Requester and {shared_config_id} shared configuration belong to the team
              with {admin} permission or
            - Requester is owner

          Postconditions:
          - shared environment variable with {path} defined in the body exists
        is: [withRequestItem: {item : SharedConfFilePost},
            withResponseItem: {item : SharedConfFile}, withNotFoundError]

/shared-environment-variables:
  description: Manage Semaphore shared environment variables
  /{shared_env_var_id}:
    get:
      description: |
        Show {shared_env_var_id} shared env variable details

        Preconditions:
        - {shared_env_var_id} shared env variable exists
        - one of:
          - Requester and shared configuration that contains
            {shared_env_var_id} shared env variable belong to the team
            with at least {write} permission or
          - Requester is owner
      is: [withResponseItem: {item : SharedEnvVar}, withNotFoundError]
    delete:
      description: |
        Delete {shared_env_var_id} shared env variable

        Preconditions:
        - {shared_env_var_id} shared env variable exists
        - {shared_env_var_id} shared env variable is not connected to any project
        - one of:
          - Requester and shared configuration that contains
            {shared_env_var_id} shared env variable belong to the team
            with {admin} permission or
          - Requester is owner

        Postconditions:
        - {shared_env_var_id} shared env variable does not exist
      is: [withNoBodyResponse, withNotFoundError]
    patch:
      description: |
        Update {shared_env_var_id} shared env variable

        Preconditions:
        - {shared_env_var_id} shared env variable exists
        - one of:
          - Requester and shared configuration that contains
            {shared_env_var_id} shared env variable belong to the team
            with {admin} permission or
          - Requester is owner

        Postconditions:
        - {shared_env_var_id} shared env variable exists but with changed attributes
      is: [withRequestItem: {item : SharedEnvVarPatch},
          withResponseItem: {item : SharedEnvVar}, withNotFoundError]

/shared-configuration-files:
  description: Manage Semaphore shared configuration files
  /{shared_conf_file_id}:
    get:
      description: |
        Show {shared_conf_file_id} shared config file details

        Preconditions:
        - {shared_conf_file_id} shared config file exists
        - one of:
          - Requester and shared configuration that contains
            {shared_conf_file_id} shared config file belong to the team
            with at least {write} permission or
          - Requester is owner
      is: [withResponseItem: {item : SharedConfFile}, withNotFoundError]
    delete:
      description: |
        Delete {shared_conf_file_id} shared config file

        Preconditions:
        - {shared_conf_file_id} shared config file exists
        - {shared_conf_file_id} shared config file is not connected to any project
        - one of:
          - Requester and shared configuration that contains
            {shared_conf_file_id} shared config file belong to the team
            with {admin} permission or
          - Requester is owner

        Postconditions:
        - {shared_conf_file_id} shared config file does not exist
      is: [withNoBodyResponse, withNotFoundError]
    patch:
      description: |
        Update {shared_conf_file_id} shared config file

        Preconditions:
        - {shared_conf_file_id} shared config file exists
        - one of:
          - Requester and shared configuration that contains
            {shared_conf_file_id} shared config filee belong to the team
            with {admin} permission or
          - Requester is owner

        Postconditions:
        - {shared_conf_file_id} shared config file exists but with changed attributes
      is: [withRequestItem: {item : SharedConfFilePatch},
          withResponseItem: {item : SharedConfFile}, withNotFoundError]
